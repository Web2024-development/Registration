"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = knexStringcase;
const converter_factory_1 = __importDefault(require("./converter-factory"));
const key_converter_factory_1 = __importDefault(require("./key-converter-factory"));
function knexStringcase(config) {
    var _a, _b;
    const options = Object.assign({}, config);
    delete options.appWrapIdentifier;
    delete options.appPostProcessResponse;
    delete options.appStringcase;
    delete options.stringcase;
    delete options.recursiveStringcase;
    options.wrapIdentifier = wrapIdentifierFactory((0, converter_factory_1.default)((_a = config === null || config === void 0 ? void 0 : config.stringcase) !== null && _a !== void 0 ? _a : 'snakecase'), config === null || config === void 0 ? void 0 : config.appWrapIdentifier, config === null || config === void 0 ? void 0 : config.wrapIdentifier);
    options.postProcessResponse = postProcessResponseFactory((0, key_converter_factory_1.default)((0, converter_factory_1.default)((_b = config === null || config === void 0 ? void 0 : config.appStringcase) !== null && _b !== void 0 ? _b : 'camelcase'), config === null || config === void 0 ? void 0 : config.recursiveStringcase), config === null || config === void 0 ? void 0 : config.postProcessResponse, config === null || config === void 0 ? void 0 : config.appPostProcessResponse);
    return options;
}
function wrapIdentifierFactory(converter, before, after) {
    return function wrapIdentifier(value, origImpl, queryContext) {
        let output = value;
        if (typeof before === 'function') {
            output = before(output, queryContext);
        }
        output = converter(output);
        if (typeof after === 'function') {
            output = after(output, origImpl, queryContext);
        }
        else {
            output = origImpl(output);
        }
        return output;
    };
}
function postProcessResponseFactory(keyConverter, before, after) {
    return function postProcessResponse(result, queryContext) {
        let output = result;
        if (typeof before === 'function') {
            output = before(output, queryContext);
        }
        output = keyConverter(output, 'root', queryContext);
        if (typeof after === 'function') {
            output = after(output, queryContext);
        }
        return output;
    };
}
