"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = converterFactory;
const stringcase_1 = __importDefault(require("stringcase"));
function converterFactory(arr) {
    const modifiers = (Array.isArray(arr) ? arr : [arr]).map(getModifier);
    const cache = new Map();
    return function converter(value) {
        if (!cache.has(value)) {
            cache.set(value, modifiers.reduce((acc, cur) => cur(acc), value));
        }
        return cache.get(value);
    };
}
function getModifier(modifier) {
    switch (typeof modifier) {
        case 'string': return getStringcase(modifier);
        case 'function': return modifier;
        default: throw new Error('Conversion must be string or function');
    }
}
function getStringcase(name) {
    const modifier = stringcase_1.default[name];
    if (typeof modifier === 'function') {
        return modifier;
    }
    else {
        throw new Error(`Invalid conversion string: ${name}`);
    }
}
